// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

enum ResourceType {
  Wood
  Stone
  Coal
  Copper
  Obsidian
  Silver
  Ironwood
  Cold_Iron
  Gold
  Hartwood
  Diamonds
  Sapphire
  Deep_Crystal
  Ruby
  Ignium
  Ethereal_Silica
  True_Ice
  Twilight_Quartz
  Alchemical_Silver
  Adamantine
  Mithral
  Dragonhide
}

enum RealmTraitType {
  Region
  City
  Harbor
  River
}

enum BuildingType {
  Fairgrounds
  Royal_Reserve
  Grand_Market
  Castle
  Guild
  Officer_Academy
  Granary
  Housing
  Amphitheater
  Archer_Tower
  School
  Mage_Tower
  Trade_Office
  Architect
  Parade_Grounds
  Barracks
  Dock
  Fishmonger
  Farms
  Hamlet
}

enum OrderType {
  Power
  Giants
  Titans
  Skill
  Perfection
  Brilliance
  Enlightenment
  Protection
  Anger
  Rage
  Fury
  Vitriol
  the_Fox
  Detection
  Reflection
  the_Twins
}

enum SquadType {
  Watchman
  Guard
  Guard_Captain
  Squire
  Knight
  Knight_Commander
  Scout
  Archer
  Sniper
  Scorpio
  Ballista
  Catapult
  Shaman
  Healer
  Life_Mage
  Apprentice
  Mage
  Arcanist
  Grand_Marshal
}

enum SquadAction {
  Offence
  Defence
}

// MILSTONE 1
model Wallet {
  id      Int             @id @default(autoincrement())
  address String          @unique
  realms  Realm[]         @relation()
  sRealms SRealm[]        @relation()
  tokens  ResourceToken[] @relation()
}

// MILSTONE 1
model Realm {
  id           Int          @id @default(autoincrement())
  realmId      Int          @unique
  name         String?
  wallet       Wallet?      @relation(fields: [owner], references: [address])
  owner        String?
  bridgedOwner String?
  ownerL2      String?
  settledOwner String?
  wonder       String?
  rarityRank   Int          @default(0)
  rarityScore  Float        @default(0)
  imageUrl     String       @default("")
  orderType    OrderType?
  buildings    Building[]
  resources    Resource[]
  traits       RealmTrait[]
  squads       Squad[]
}

// MILSTONE 1
model Building {
  id      Int          @id @default(autoincrement())
  type    BuildingType
  realmId Int?
  eventId String
  realm   Realm?       @relation(fields: [realmId], references: [realmId])

  @@unique([realmId, eventId])
}

model BuildingRealmTraitConstraint {
  type      BuildingType
  traitType RealmTraitType
  max       Int            @default(5)

  @@unique([type])
}

model BuildingCost {
  buildingType BuildingType @id
  resourceType ResourceType
  qty          Int

  @@unique([buildingType, resourceType])
}

// MILSTONE 1
model Resource {
  id       Int          @id @default(autoincrement())
  type     ResourceType
  realmId  Int?
  realm    Realm?       @relation(fields: [realmId], references: [realmId])
  level    Int          @default(0)
  upgrades String[]

  @@unique([type, realmId])
}

model ResourceToken {
  id      Int          @id @default(autoincrement())
  type    ResourceType
  qty     Int
  address String
  wallet  Wallet       @relation(fields: [address], references: [address])
}

model RealmTrait {
  type    RealmTraitType
  qty     Int
  realmId Int
  realm   Realm?         @relation(fields: [realmId], references: [realmId])

  @@unique([type, realmId])
}

// MILSTONE 1
model SRealm {
  id      Int     @id @default(autoincrement())
  realmId Int     @unique
  wallet  Wallet? @relation(fields: [owner], references: [address])
  owner   String?
}

// MILSTONE 1

model Squad {
  id      Int         @id @default(autoincrement())
  realmId Int
  action  SquadAction
  type    SquadType

  realm Realm @relation(fields: [realmId], references: [realmId])
  @@unique([realmId, action])
}

model SquadCost {
  squadType    SquadType    @id
  resourceType ResourceType
  qty          Int

  @@unique([squadType, resourceType])
}

///////////// MILSTONE 2 ///////////////
// model Character {
//   id        Int        @id @default(autoincrement())
//   name      String
//   sex       String
//   race      String
//   orderId   Int?
//   wallet    Wallet     @relation(fields: [id], references: [id])
//   lootItems LootItem[]
// }

// model LootItem {
//   id              Int        @id @default(autoincrement())
//   characterId     Int        @unique
//   name            String
//   equipmentId     Int? // 1 = head, 2 = body etc TODO
//   orderId         Int?
//   prefixId        Int?
//   suffixId        Int?
//   greatnessLevel  Int?
//   locationFoundId Int? // Do we set locations like 011111 = 01 = realms  | 1111 = realm id
//   wallet          Wallet?    @relation(fields: [id], references: [id])
//   character       Character? @relation(fields: [characterId], references: [id])
// }

// MILSTONE 2
model Desiege {
  id             Int       @id @default(autoincrement())
  gameId         Int       @unique
  winner         Int?
  attackedTokens Int?
  defendedTokens Int?
  eventIndexed   String?
  initialHealth  Int?      @default(0)
  startedOn      DateTime?
}

model Event {
  id                Int      @id @default(autoincrement())
  eventId           String   @unique
  blockNumber       Int      @default(0)
  transactionNumber Int      @default(0)
  chainId           String
  contract          String
  name              String
  parameters        String[]
  keys              String[]
  timestamp         DateTime
  txHash            String
  status            Int      @default(0) // 0 event logged, 1 details fetched, 2 synced, -1 error
}

// LORE
// model LastEvents {
//   module
// }
model LastIndexedEvent {
  moduleName String @id

  eventId String
}

model LoreEntity {
  id    Int     @id // from blockchain
  owner String?
  kind  Int     @default(0) // Text entity is a default

  // TODO: wanted to add it but Prisma doesn't allow it... its brain explodes
  // lastRevision    LoreEntityRevision @relation(fields: [lastRevisionId], references: [id])
  // lastRevisionId  Int

  revisions LoreEntityRevision[]
}

model LoreEntityRevision {
  id Int @id @default(autoincrement())

  revisionNumber Int // from blockchain

  // Arweave linking
  arweaveId String

  title String?

  // Text kind fields
  markdown String? // markdown body text
  excerpt  String? // small description

  // Media kind fields
  media_url String?

  createdAt DateTime? @default(now())

  entity   LoreEntity @relation(fields: [entityId], references: [id])
  entityId Int

  pois  LorePoisOnEntityRevisions[]
  props LorePropsOnEntityRevisions[]
}

model LorePOI {
  id        Int     @id // the same as in blockchain 1, 1000, 1001, 2000, 2001, etc.
  name      String
  assetType String?

  entities LorePoisOnEntityRevisions[]
}

model LoreProp {
  id   Int    @id
  name String

  entities LorePropsOnEntityRevisions[]
}

model LorePoisOnEntityRevisions {
  entityRevision   LoreEntityRevision @relation(fields: [entityRevisionId], references: [id])
  entityRevisionId Int
  poi              LorePOI            @relation(fields: [poiId], references: [id])
  poiId            Int

  assetId String? // uint256

  @@id([entityRevisionId, poiId])
}

model LorePropsOnEntityRevisions {
  entityRevision   LoreEntityRevision @relation(fields: [entityRevisionId], references: [id])
  entityRevisionId Int // relation scalar field (used in the `@relation` attribute above)
  prop             LoreProp           @relation(fields: [propId], references: [id])
  propId           Int // relation scalar field (used in the `@relation` attribute above)

  value String?

  @@id([entityRevisionId, propId])
}
