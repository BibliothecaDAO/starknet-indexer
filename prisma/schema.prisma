// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  Wood
  Stone
  Coal
  Copper
  Obsidian
  Silver
  Ironwood
  Cold_Iron
  Gold
  Hartwood
  Diamonds
  Sapphire
  Deep_Crystal
  Ruby
  Ignium
  Ethereal_Silica
  True_Ice
  Twilight_Quartz
  Alchemical_Silver
  Adamantine
  Mithral
  Dragonhide
}

enum RealmTraitType {
  Region
  City
  Harbor
  River
}

enum BuildingType {
  Fairgrounds
  Royal_Reserve
  Grand_Market
  Castle
  Guild
  Officer_Academy
  Granary
  Housing
  Amphitheater
  Carpenter
  School
  Symposium
  Logistics_Office
  Explorers_Guild
  Parade_Grounds
  Resource_Facility
  Dock
  Fishmonger
  Farms
  Hamlet
}

// MILSTONE 1
model Wallet {
  id      Int             @id @default(autoincrement())
  address String          @unique
  realms  Realm[]         @relation()
  sRealms SRealm[]        @relation()
  tokens  ResourceToken[] @relation()
}

// MILSTONE 1
model Realm {
  id        Int          @id @default(autoincrement())
  realmId   Int          @unique
  name      String?
  wallet    Wallet?      @relation(fields: [owner], references: [address])
  owner     String?
  buildings Building[]
  resources Resource[]
  traits    RealmTrait[]

  // offenceSquad Squad?     @relation("offenceSquad")
  // defenceSquad Squad?     @relation("defenceSquad")

  // Squad     Squad[]    @relation("offenceSquad")
  // Squad     Squad[]    @relation("defenceSquad")
}

// MILSTONE 1
model Building {
  id      Int          @id @default(autoincrement())
  type    BuildingType
  realmId Int?         @unique
  realm   Realm?       @relation(fields: [realmId], references: [realmId])
}

model BuildingRealmTraitConstraint {
  type      BuildingType
  traitType RealmTraitType
  max       Int            @default(5)

  @@unique([type])
}

model BuildingCost {
  buildingType BuildingType @id
  resourceType ResourceType
  qty          Int

  @@unique([buildingType, resourceType])
}

// MILSTONE 1
model Resource {
  id      Int          @id @default(autoincrement())
  type    ResourceType
  qty     Int          @default(100) // CAN REMOVE as not tracked here
  lvl     Int          @default(0)
  realmId Int?
  realm   Realm?       @relation(fields: [realmId], references: [realmId])

  @@unique([type, realmId])
}

model ResourceToken {
  id      Int          @id @default(autoincrement())
  type    ResourceType
  qty     Int
  address String
  wallet  Wallet       @relation(fields: [address], references: [address])
}

model RealmTrait {
  type    RealmTraitType
  qty     Int
  realmId Int
  realm   Realm?         @relation(fields: [realmId], references: [realmId])

  @@unique([type, realmId])
}

// MILSTONE 1
model SRealm {
  id      Int     @id @default(autoincrement())
  realmId Int     @unique
  wallet  Wallet? @relation(fields: [owner], references: [address])
  owner   String?
}

// MILSTONE 1
// NOTE: Each Realm can have Two squads. One for offence and one for deffence. Unsure best way to model this....??
// Watchman
// Guard
// Guard Captain
// Squire
// Knight
// Knight Commander
// Scout
// Archer
// Sniper
// Scorpio
// Ballista
// Catapult
// Shaman
// Healer
// Life Mage
// Apprentice
// Mage
// Arcanist
// Grand Marshal
model Squad {
  id             Int  @id @default(autoincrement())
  realmId        Int  @unique
  // realmOffence   Realm? @relation(name: "offenceSquad", fields: [realmOffenceId], references: [realmId])
  // realmDefence   Realm? @relation(name: "defenceSquad", fields: [realmDefenceId], references: [realmId])
  realmOffenceId Int? @unique
  realmDefenceId Int? @unique
}

///////////// MILSTONE 2 ///////////////
// model Character {
//   id        Int        @id @default(autoincrement())
//   name      String
//   sex       String
//   race      String
//   orderId   Int?
//   wallet    Wallet     @relation(fields: [id], references: [id])
//   lootItems LootItem[]
// }

// model LootItem {
//   id              Int        @id @default(autoincrement())
//   characterId     Int        @unique
//   name            String
//   equipmentId     Int? // 1 = head, 2 = body etc TODO
//   orderId         Int?
//   prefixId        Int?
//   suffixId        Int?
//   greatnessLevel  Int?
//   locationFoundId Int? // Do we set locations like 011111 = 01 = realms  | 1111 = realm id
//   wallet          Wallet?    @relation(fields: [id], references: [id])
//   character       Character? @relation(fields: [characterId], references: [id])
// }

// MILSTONE 2
model Desiege {
  id             Int       @id @default(autoincrement())
  gameId         Int       @unique
  winner         Int?
  attackedTokens Int?
  defendedTokens Int?
  eventIndexed   Int?
  initialHealth  Int?      @default(0)
  startedOn      DateTime?
}

model Event {
  id         Int      @id @default(autoincrement())
  eventId    Int      @unique
  chainId    String
  contract   String
  name       String
  parameters Int[]
  timestamp  DateTime
  txHash     String
  status     Int      @default(0)
}
