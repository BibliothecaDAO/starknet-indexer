# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateEvent {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
}

"""The Buildings Model"""
type Building {
  id: ID!
  realm: Realm
  realmId: Float!
  type: String
}

"""Building Cost Model"""
type BuildingCost {
  buildingType: String!
  qty: Float!
  resourceType: String!
}

input BuildingCostInput {
  buildingType: String!
  qty: Float!
  resourceType: String!
}

input BuildingInput {
  id: ID
  realmId: Float!
  type: BuildingType!
}

enum BuildingType {
  Amphitheater
  Carpenter
  Castle
  Dock
  Explorers_Guild
  Fairgrounds
  Farms
  Fishmonger
  Granary
  Grand_Market
  Guild
  Hamlet
  Housing
  Logistics_Office
  Officer_Academy
  Parade_Grounds
  Resource_Facility
  Royal_Reserve
  School
  Symposium
}

input BuildingTypeInput {
  equals: BuildingType
  in: [BuildingType!]
  not: [BuildingType!]
  notIn: [BuildingType!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

"""The Desiege Model"""
type Desiege {
  attackedTokens: Float!
  defendedTokens: Float!
  eventIndexed: Float!
  gameId: Float!
  id: ID!
  initialHealth: Float!
  startedOn: DateTime!
  winner: Float!
}

type Event {
  blockNumber: Int!
  chainId: String!
  contract: String!
  eventId: String!
  id: Int!
  keys: [String!]!
  name: String!
  parameters: [String!]!
  status: Int!
  timestamp: DateTime!
  transactionNumber: Int!
  txHash: String!
}

type EventAvgAggregate {
  blockNumber: Float
  id: Float
  status: Float
  transactionNumber: Float
}

input EventAvgOrderByAggregateInput {
  blockNumber: SortOrder
  id: SortOrder
  status: SortOrder
  transactionNumber: SortOrder
}

type EventCountAggregate {
  _all: Int!
  blockNumber: Int!
  chainId: Int!
  contract: Int!
  eventId: Int!
  id: Int!
  keys: Int!
  name: Int!
  parameters: Int!
  status: Int!
  timestamp: Int!
  transactionNumber: Int!
  txHash: Int!
}

input EventCountOrderByAggregateInput {
  blockNumber: SortOrder
  chainId: SortOrder
  contract: SortOrder
  eventId: SortOrder
  id: SortOrder
  keys: SortOrder
  name: SortOrder
  parameters: SortOrder
  status: SortOrder
  timestamp: SortOrder
  transactionNumber: SortOrder
  txHash: SortOrder
}

input EventCreateInput {
  blockNumber: Int
  chainId: String!
  contract: String!
  eventId: String!
  keys: EventCreatekeysInput
  name: String!
  parameters: EventCreateparametersInput
  status: Int
  timestamp: DateTime!
  transactionNumber: Int
  txHash: String!
}

input EventCreateManyInput {
  blockNumber: Int
  chainId: String!
  contract: String!
  eventId: String!
  id: Int
  keys: EventCreatekeysInput
  name: String!
  parameters: EventCreateparametersInput
  status: Int
  timestamp: DateTime!
  transactionNumber: Int
  txHash: String!
}

input EventCreatekeysInput {
  set: [String!]!
}

input EventCreateparametersInput {
  set: [String!]!
}

type EventGroupBy {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
  blockNumber: Int!
  chainId: String!
  contract: String!
  eventId: String!
  id: Int!
  keys: [String!]
  name: String!
  parameters: [String!]
  status: Int!
  timestamp: DateTime!
  transactionNumber: Int!
  txHash: String!
}

type EventMaxAggregate {
  blockNumber: Int
  chainId: String
  contract: String
  eventId: String
  id: Int
  name: String
  status: Int
  timestamp: DateTime
  transactionNumber: Int
  txHash: String
}

input EventMaxOrderByAggregateInput {
  blockNumber: SortOrder
  chainId: SortOrder
  contract: SortOrder
  eventId: SortOrder
  id: SortOrder
  name: SortOrder
  status: SortOrder
  timestamp: SortOrder
  transactionNumber: SortOrder
  txHash: SortOrder
}

type EventMinAggregate {
  blockNumber: Int
  chainId: String
  contract: String
  eventId: String
  id: Int
  name: String
  status: Int
  timestamp: DateTime
  transactionNumber: Int
  txHash: String
}

input EventMinOrderByAggregateInput {
  blockNumber: SortOrder
  chainId: SortOrder
  contract: SortOrder
  eventId: SortOrder
  id: SortOrder
  name: SortOrder
  status: SortOrder
  timestamp: SortOrder
  transactionNumber: SortOrder
  txHash: SortOrder
}

input EventOrderByWithAggregationInput {
  _avg: EventAvgOrderByAggregateInput
  _count: EventCountOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  _sum: EventSumOrderByAggregateInput
  blockNumber: SortOrder
  chainId: SortOrder
  contract: SortOrder
  eventId: SortOrder
  id: SortOrder
  keys: SortOrder
  name: SortOrder
  parameters: SortOrder
  status: SortOrder
  timestamp: SortOrder
  transactionNumber: SortOrder
  txHash: SortOrder
}

input EventOrderByWithRelationInput {
  blockNumber: SortOrder
  chainId: SortOrder
  contract: SortOrder
  eventId: SortOrder
  id: SortOrder
  keys: SortOrder
  name: SortOrder
  parameters: SortOrder
  status: SortOrder
  timestamp: SortOrder
  transactionNumber: SortOrder
  txHash: SortOrder
}

enum EventScalarFieldEnum {
  blockNumber
  chainId
  contract
  eventId
  id
  keys
  name
  parameters
  status
  timestamp
  transactionNumber
  txHash
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  blockNumber: IntWithAggregatesFilter
  chainId: StringWithAggregatesFilter
  contract: StringWithAggregatesFilter
  eventId: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  keys: StringNullableListFilter
  name: StringWithAggregatesFilter
  parameters: StringNullableListFilter
  status: IntWithAggregatesFilter
  timestamp: DateTimeWithAggregatesFilter
  transactionNumber: IntWithAggregatesFilter
  txHash: StringWithAggregatesFilter
}

type EventSumAggregate {
  blockNumber: Int
  id: Int
  status: Int
  transactionNumber: Int
}

input EventSumOrderByAggregateInput {
  blockNumber: SortOrder
  id: SortOrder
  status: SortOrder
  transactionNumber: SortOrder
}

input EventUpdateInput {
  blockNumber: IntFieldUpdateOperationsInput
  chainId: StringFieldUpdateOperationsInput
  contract: StringFieldUpdateOperationsInput
  eventId: StringFieldUpdateOperationsInput
  keys: EventUpdatekeysInput
  name: StringFieldUpdateOperationsInput
  parameters: EventUpdateparametersInput
  status: IntFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  transactionNumber: IntFieldUpdateOperationsInput
  txHash: StringFieldUpdateOperationsInput
}

input EventUpdateManyMutationInput {
  blockNumber: IntFieldUpdateOperationsInput
  chainId: StringFieldUpdateOperationsInput
  contract: StringFieldUpdateOperationsInput
  eventId: StringFieldUpdateOperationsInput
  keys: EventUpdatekeysInput
  name: StringFieldUpdateOperationsInput
  parameters: EventUpdateparametersInput
  status: IntFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  transactionNumber: IntFieldUpdateOperationsInput
  txHash: StringFieldUpdateOperationsInput
}

input EventUpdatekeysInput {
  push: [String!]
  set: [String!]
}

input EventUpdateparametersInput {
  push: [String!]
  set: [String!]
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  blockNumber: IntFilter
  chainId: StringFilter
  contract: StringFilter
  eventId: StringFilter
  id: IntFilter
  keys: StringNullableListFilter
  name: StringFilter
  parameters: StringNullableListFilter
  status: IntFilter
  timestamp: DateTimeFilter
  transactionNumber: IntFilter
  txHash: StringFilter
}

input EventWhereUniqueInput {
  eventId: String
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntFilterInput {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""Lore Entity"""
type LoreEntity {
  id: ID!
  kind: Float!
  owner: String!
  revisions: [LoreEntityRevision!]!
}

"""Lore Entity Revision"""
type LoreEntityRevision {
  createdAt: DateTime!
  excerpt: String
  id: ID!
  markdown: String
  pois: [LorePoisOnEntityRevisions!]!
  props: [LorePropsOnEntityRevisions!]!
  revisionNumber: Float!
  title: String
}

"""Lore POI"""
type LorePoi {
  assetType: String
  id: ID!
  name: String!
}

"""Lore Entity Revision"""
type LorePoisOnEntityRevisions {
  assetId: String
  entityRevisionId: ID!
  poiId: ID!
}

"""Lore Entity Revision"""
type LorePropsOnEntityRevisions {
  entityRevisionId: ID!
  propId: ID!
  value: String
}

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createManyEvent(data: [EventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOrUpdateBuildingCost(data: BuildingCostInput!): BuildingCost!
  createOrUpdateBuildings(data: BuildingInput!): Building!
  createOrUpdateRealm(data: RealmInput!): Realm!
  createOrUpdateRealmTrait(data: RealmTraitInput!): RealmTrait!
  createOrUpdateResources(data: ResourceInput!): Resource!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  reindexDesiege: Boolean!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): AffectedRowsOutput!
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

"""Order By Direction"""
enum OrderByDirectionInput {
  asc
  desc
}

enum OrderType {
  Anger
  Brilliance
  Detection
  Enlightenment
  Fury
  Giants
  Perfection
  Power
  Protection
  Rage
  Reflection
  Skill
  Titans
  Vitriol
  the_Fox
  the_Twins
}

input OrderTypeInput {
  equals: OrderType
  in: [OrderType!]
  not: [OrderType!]
  notIn: [OrderType!]
}

type Query {
  aggregateEvent(cursor: EventWhereUniqueInput, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): AggregateEvent!
  event(where: EventWhereUniqueInput!): Event
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  findFirstEvent(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  getBuilding(id: Float!): Building!
  getBuildingCosts: [BuildingCost!]!
  getBuildings: [Building!]!
  getBuildingsByAddress(address: String!): [Building!]!
  getBuildingsByRealm(realmId: Float!): [Building!]!
  getDesiege(id: Float!): Desiege!
  getDesiegeGames: [Desiege!]!
  getLoreEntities(skip: Float = 0, take: Float = 100): [LoreEntity!]!
  getLoreEntity(entityId: Float!): LoreEntity!
  getLorePois(skip: Float = 0, take: Float = 100): [LorePoi!]!
  getRealm(realmId: Float!): Realm!
  getRealmTraits: [RealmTrait!]!
  getRealms(filter: RealmFilterInput, orderBy: RealmOrderByInput, skip: Float = 0, take: Float = 100): [Realm!]!
  getResource(id: Float!): Resource!
  getResources: [Resource!]!
  getResourcesByAddress(address: String!): [Resource!]!
  getWallet(address: String!): Wallet!
  groupByEvent(by: [EventScalarFieldEnum!]!, having: EventScalarWhereWithAggregatesInput, orderBy: [EventOrderByWithAggregationInput!], skip: Int, take: Int, where: EventWhereInput): [EventGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

"""The Realm Model"""
type Realm {
  bridgedOwner: String
  buildings: [Building!]
  imageUrl: String
  name: String
  orderType: String!
  owner: String
  ownerL2: String
  rarityRank: Int!
  rarityScore: Float!
  realmId: Int!
  resources: [Resource!]
  settledOwner: String
  squads: [Squad!]
  traits: [RealmTrait!]
  wallet: Wallet
  wonder: String
}

input RealmFilterInput {
  AND: [RealmFilterInput!]
  NOT: [RealmFilterInput!]
  OR: [RealmFilterInput!]
  bridgedOwner: StringFilterInput
  buildingType: BuildingTypeInput
  name: StringFilterInput
  orderType: OrderTypeInput
  owner: StringFilterInput
  ownerL2: StringFilterInput
  rarityRank: IntFilterInput
  rarityScore: IntFilterInput
  realmId: IntFilterInput
  resourceType: ResourceTypeInput
  settledOwner: StringFilterInput
  squadAction: SquadActionInput
  squadType: SquadTypeInput
  trait: RealmTraitFilterInput
  wonder: StringFilterInput
}

input RealmInput {
  bridgedOwner: String
  imageUrl: String
  name: String!
  orderType: String
  owner: String
  ownerL2: String
  rarityRank: Int
  rarityScore: Float
  realmId: Int!
  settledOwner: String
  wonder: String
}

input RealmOrderByInput {
  rarityRank: OrderByDirectionInput
  rarityScore: OrderByDirectionInput
  realmId: OrderByDirectionInput
}

"""Realm Trait Model"""
type RealmTrait {
  id: ID!
  qty: Float!
  realm: Realm
  realmId: Float!
  type: String!
}

input RealmTraitFilterInput {
  qty: IntFilterInput
  type: RealmTraitType!
}

input RealmTraitInput {
  qty: Float!
  realmId: Float!
  type: RealmTraitType!
}

enum RealmTraitType {
  City
  Harbor
  Region
  River
}

"""The Resource Model"""
type Resource {
  id: ID!
  realm: Realm!
  realmId: Float
  type: String!
}

input ResourceInput {
  id: ID
  realmId: Float!
  type: ResourceType!
}

"""ResourceType"""
enum ResourceType {
  Adamantine
  Alchemical_Silver
  Coal
  Cold_Iron
  Copper
  Deep_Crystal
  Diamonds
  Dragonhide
  Ethereal_Silica
  Gold
  Hartwood
  Ignium
  Ironwood
  Mithral
  Obsidian
  Ruby
  Sapphire
  Silver
  Stone
  True_Ice
  Twilight_Quartz
  Wood
}

input ResourceTypeInput {
  equals: ResourceType
  in: [ResourceType!]
  not: [ResourceType!]
  notIn: [ResourceType!]
}

enum SortOrder {
  asc
  desc
}

"""The Squad Model"""
type Squad {
  action: String!
  realm: Realm
  realmId: Int!
  type: String!
}

enum SquadAction {
  Defence
  Offence
}

input SquadActionInput {
  equals: SquadAction
  in: [SquadAction!]
  not: [SquadAction!]
  notIn: [SquadAction!]
}

enum SquadType {
  Apprentice
  Arcanist
  Archer
  Ballista
  Catapult
  Grand_Marshal
  Guard
  Guard_Captain
  Healer
  Knight
  Knight_Commander
  Life_Mage
  Mage
  Scorpio
  Scout
  Shaman
  Sniper
  Squire
  Watchman
}

input SquadTypeInput {
  equals: SquadType
  in: [SquadType!]
  not: [SquadType!]
  notIn: [SquadType!]
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringFilterInput {
  contains: [String!]
  endsWith: [String!]
  equals: String
  gt: [String!]
  gte: [String!]
  in: [String!]
  lt: [String!]
  lte: [String!]
  not: [String!]
  notIn: [String!]
  startsWith: [String!]
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

"""The Wallet Model"""
type Wallet {
  address: String!
  realmsBridgedHeld: Int!
  realmsL1Held: Int!
  realmsL2Held: Int!
  realmsSettledHeld: Int!
}
