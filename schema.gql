# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The Buildings Model"""
type Building {
  id: ID!
  realm: Realm
  realmId: Float!
  type: String
}

"""Building Cost Model"""
type BuildingCost {
  buildingType: String!
  qty: Float!
  resourceType: String!
}

input BuildingCostInput {
  buildingType: String!
  qty: Float!
  resourceType: String!
}

input BuildingInput {
  id: ID
  realmId: Float!
  type: BuildingType!
}

enum BuildingType {
  Amphitheater
  Carpenter
  Castle
  Dock
  Explorers_Guild
  Fairgrounds
  Farms
  Fishmonger
  Granary
  Grand_Market
  Guild
  Hamlet
  Housing
  Logistics_Office
  Officer_Academy
  Parade_Grounds
  Resource_Facility
  Royal_Reserve
  School
  Symposium
}

input BuildingTypeInput {
  equals: BuildingType
  in: [BuildingType!]
  not: [BuildingType!]
  notIn: [BuildingType!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The Desiege Model"""
type Desiege {
  attackedTokens: Float!
  defendedTokens: Float!
  eventIndexed: Float!
  gameId: Float!
  id: ID!
  initialHealth: Float!
  startedOn: DateTime!
  winner: Float!
}

"""StarkNet Event Model"""
type Event {
  chainId: String!
  contract: String!
  eventId: Float!
  id: ID!
  name: String!
  parameters: [Float!]!
  timestamp: DateTime!
  txHash: String!
}

input IntFilterInput {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  notIn: [Int!]
}

type Mutation {
  createOrUpdateBuildingCost(data: BuildingCostInput!): BuildingCost!
  createOrUpdateBuildings(data: BuildingInput!): Building!
  createOrUpdateRealm(data: RealmInput!): Realm!
  createOrUpdateRealmTrait(data: RealmTraitInput!): RealmTrait!
  createOrUpdateResources(data: ResourceInput!): Resource!
  createOrUpdateWallet(data: WalletInput!): Wallet!
  reindexDesiege: Boolean!
}

"""Order By Direction"""
enum OrderByDirectionInput {
  asc
  desc
}

enum OrderType {
  Anger
  Brilliance
  Detection
  Enlightenment
  Fury
  Giants
  Perfection
  Power
  Protection
  Rage
  Reflection
  Skill
  Titans
  Vitriol
  the_Fox
  the_Twins
}

input OrderTypeInput {
  equals: OrderType
  in: [OrderType!]
  not: [OrderType!]
  notIn: [OrderType!]
}

type Query {
  getBuilding(id: Float!): Building!
  getBuildingCosts: [BuildingCost!]!
  getBuildings: [Building!]!
  getBuildingsByAddress(address: String!): [Building!]!
  getBuildingsByRealm(realmId: Float!): [Building!]!
  getDesiege(id: Float!): Desiege!
  getDesiegeGames: [Desiege!]!
  getEvent(id: Float!): Event!
  getEvents: [Event!]!
  getRealm(realmId: Float!): Realm!
  getRealmTraits: [RealmTrait!]!
  getRealms(filter: RealmFilterInput, orderBy: RealmOrderByInput, skip: Float = 0, take: Float = 100): [Realm!]!
  getResource(id: Float!): Resource!
  getResources: [Resource!]!
  getResourcesByAddress(address: String!): [Resource!]!
  getWallet(address: String!): Wallet!
  getWallets: [Wallet!]!
}

"""The Realm Model"""
type Realm {
  buildings: [Building!]
  imageUrl: String
  name: String
  orderType: String!
  owner: String
  rarityRank: Int!
  rarityScore: Float!
  realmId: Int!
  resources: [Resource!]
  squads: [Squad!]
  traits: [RealmTrait!]
  wallet: Wallet
}

input RealmFilterInput {
  AND: [RealmFilterInput!]
  NOT: [RealmFilterInput!]
  OR: [RealmFilterInput!]
  buildingType: BuildingTypeInput
  name: StringFilterInput
  orderType: OrderTypeInput
  owner: StringFilterInput
  rarityRank: IntFilterInput
  rarityScore: IntFilterInput
  realmId: IntFilterInput
  resourceType: ResourceTypeInput
  squadAction: SquadActionInput
  squadType: SquadTypeInput
  traitType: RealmTraitTypeInput
}

input RealmInput {
  imageUrl: String
  name: String!
  orderType: String
  owner: String
  rarityRank: Int
  rarityScore: Float
  realmId: Int!
}

input RealmOrderByInput {
  rarityRank: OrderByDirectionInput
  rarityScore: OrderByDirectionInput
  realmId: OrderByDirectionInput
}

"""Realm Trait Model"""
type RealmTrait {
  id: ID!
  qty: Float!
  realm: Realm
  realmId: Float!
  type: String!
}

input RealmTraitInput {
  qty: Float!
  realmId: Float!
  type: RealmTraitType!
}

enum RealmTraitType {
  City
  Harbor
  Region
  River
}

input RealmTraitTypeInput {
  equals: RealmTraitType
  in: [RealmTraitType!]
  not: [RealmTraitType!]
  notIn: [RealmTraitType!]
}

"""The Resource Model"""
type Resource {
  id: ID!
  realm: Realm!
  realmId: Float
  type: String!
}

input ResourceInput {
  id: ID
  realmId: Float!
  type: ResourceType!
}

"""ResourceType"""
enum ResourceType {
  Adamantine
  Alchemical_Silver
  Coal
  Cold_Iron
  Copper
  Deep_Crystal
  Diamonds
  Dragonhide
  Ethereal_Silica
  Gold
  Hartwood
  Ignium
  Ironwood
  Mithral
  Obsidian
  Ruby
  Sapphire
  Silver
  Stone
  True_Ice
  Twilight_Quartz
  Wood
}

input ResourceTypeInput {
  equals: ResourceType
  in: [ResourceType!]
  not: [ResourceType!]
  notIn: [ResourceType!]
}

"""The Squad Model"""
type Squad {
  action: String!
  realm: Realm
  realmId: Int!
  type: String!
}

enum SquadAction {
  Defence
  Offence
}

input SquadActionInput {
  equals: SquadAction
  in: [SquadAction!]
  not: [SquadAction!]
  notIn: [SquadAction!]
}

enum SquadType {
  Apprentice
  Arcanist
  Archer
  Ballista
  Catapult
  Grand_Marshal
  Guard
  Guard_Captain
  Healer
  Knight
  Knight_Commander
  Life_Mage
  Mage
  Scorpio
  Scout
  Shaman
  Sniper
  Squire
  Watchman
}

input SquadTypeInput {
  equals: SquadType
  in: [SquadType!]
  not: [SquadType!]
  notIn: [SquadType!]
}

input StringFilterInput {
  contains: [String!]
  endsWith: [String!]
  equals: String
  gt: [String!]
  gte: [String!]
  in: [String!]
  lt: [String!]
  lte: [String!]
  not: [String!]
  notIn: [String!]
  startsWith: [String!]
}

"""The Wallet Model"""
type Wallet {
  address: String!
  id: ID!
  realms: [Realm!]!
}

input WalletInput {
  address: String!
  realms: RealmInput
}
